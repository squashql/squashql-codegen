import {Client} from "./types";
import os from "os";
import _ from "lodash";
import path from "path";
import fs from "fs";

function indent(s: string): string {
    for (let i = 0; i < 4; i++) {
        s += " "
    }
    return s
}

function capitalizeFirstLetter(s: string): string {
    return s.charAt(0).toUpperCase() + s.slice(1);
}

export function codeGenerateTablesFile(client: Client, options?: any): Promise<void> {
    return client.getTablesInfo(options).then(tableTypes => {
        let s = "/*" + os.EOL + " * This file has been generated by squashql-codegen. The project is available here https://github.com/squashql/squashql-codegen" + os.EOL + " */" + os.EOL
        s += "import {TableField} from \"@squashql/squashql-js\"" + os.EOL + os.EOL
        s += "export interface SquashQLTable {" + os.EOL
        s = indent(s)
        s += "_fields: TableField[]" + os.EOL
        s = indent(s)
        s += "_name: string" + os.EOL
        s += "}" + os.EOL + os.EOL
        const tableNamesCC: string[] = []
        tableTypes.forEach(tableType => {
            const cc = _.camelCase(tableType.table)
            tableNamesCC.push(cc)
            s += "class " + capitalizeFirstLetter(cc) + " implements SquashQLTable {" + os.EOL
            s = indent(s)
            s += `readonly _name = "${tableType.table}"` + os.EOL
            const fields: string[] = [];
            tableType.fields.forEach((field) => {
                s = indent(s)
                const f = _.camelCase(field);
                fields.push(`this.${f}`)
                s += "readonly " + f + `: TableField = new TableField(\"${tableType.table}.${field}\")`
                s += os.EOL
            })
            s = indent(s)
            s += `readonly _fields: TableField[] = [${fields.join(", ")}]` + os.EOL
            s += "}" + os.EOL
            s += os.EOL
        })

        tableNamesCC.forEach(tableNameCC => {
            s += "const " + tableNameCC + " = new " + capitalizeFirstLetter(tableNameCC) + "()" + os.EOL
        })

        s += os.EOL
        s += "export {" + os.EOL
        s = indent(s)
        tableNamesCC.forEach((tableNameCC, index) => {
            s += tableNameCC
            if (index < tableNamesCC.length - 1) {
                s += ", "
            } else {
                s += os.EOL
            }
        })
        s += "}"
        s += os.EOL


        let file = 'tables.ts';
        if (process.env.SQUASHQL_PATH) {
            file = path.resolve(process.env.SQUASHQL_PATH, file);
        }
        fs.writeFileSync(file, s)
        console.log("Table type definitions successfully written to " + file)
    })
}